import { expect }  from "chai"
import { Encounter, FhirResource, Group, Patient } from "fhir/r4"
import { filter, matches, typeFilter, validateQuery }  from "../typeFilter"
import getDatabase from "../db"
import config from "../config"
import { getGroupMembers } from "../lib"


const TEST_PATIENT: Patient = {
    "resourceType": "Patient",
    "id": "58c297c4-d684-4677-8024-01131d93835e",
    "text": { "status": "generated", "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Generated by <a href=\"https://github.com/synthetichealth/synthea\">Synthea</a>.Version identifier: v2.5.0-385-ge50db853\n .   Person seed: -180287448177945758  Population seed: 1588766244164</div>" },
    "extension": [
        { "url": "http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName", "valueString": "Marquetta Schamberger" },
        { "url": "http://hl7.org/fhir/StructureDefinition/patient-birthPlace", "valueAddress": { "city": "Macau", "state": "Macao Special Administrative Region of the People's Republic of China", "country": "CN" } },
        { "url": "http://synthetichealth.github.io/synthea/disability-adjusted-life-years", "valueDecimal": 9.931319288245724 },
        { "url": "http://synthetichealth.github.io/synthea/quality-adjusted-life-years", "valueDecimal": 38.068680711754276 }
    ],
    "identifier": [
        { "system": "https://github.com/synthetichealth/synthea", "value": "58c297c4-d684-4677-8024-01131d93835e" },
        {
            "type": { "coding": [{ "system": "http://terminology.hl7.org/CodeSystem/v2-0203", "code": "MR", "display": "Medical Record Number" }], "text": "Medical Record Number" },
            "system": "http://hospital.smarthealthit.org", "value": "58c297c4-d684-4677-8024-01131d93835e"
        },
        {
            "type": { "coding": [{ "system": "http://terminology.hl7.org/CodeSystem/v2-0203", "code": "SS", "display": "Social Security Number" }], "text": "Social Security Number" },
            "system": "http://hl7.org/fhir/sid/us-ssn", "value": "999-33-6284"
        },
        {
            "type": { "coding": [{ "system": "http://terminology.hl7.org/CodeSystem/v2-0203", "code": "DL", "display": "Driver's License" }], "text": "Driver's License" },
            "system": "urn:oid:2.16.840.1.113883.4.3.25", "value": "S99959553"
        },
        {
            "type": { "coding": [{ "system": "http://terminology.hl7.org/CodeSystem/v2-0203", "code": "PPN", "display": "Passport Number" }], "text": "Passport Number" },
            "system": "http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber", "value": "X69743686X"
        }
    ],
    "name": [
        { "use": "official", "family": "Wintheiser", "given": ["Aleta"], "prefix": ["Mrs."] },
        { "use": "maiden", "family": "Heathcote", "given": ["Aleta"], "prefix": ["Mrs."] }
    ],
    "telecom": [
        { "system": "phone", "value": "555-712-4709", "use": "home" }
    ],
    "gender": "female",
    "birthDate": "1971-04-05",
    "address": [
        {
            "extension": [
                {
                    "url": "http://hl7.org/fhir/StructureDefinition/geolocation",
                    "extension": [{ "url": "latitude", "valueDecimal": 42.4697235419671 }, { "url": "longitude", "valueDecimal": -71.09392979968648 }]
                }
            ],
            "line": ["850 Kertzmann Heights"],
            "city": "Everett",
            "state": "Massachusetts",
            "postalCode": "02149",
            "country": "US"
        }
    ],
    "maritalStatus": { "coding": [{ "system": "http://terminology.hl7.org/CodeSystem/v3-MaritalStatus", "code": "M", "display": "M" }], "text": "M" },
    "multipleBirthBoolean": false,
    "communication": [
        {
            "language": {
                "coding": [{ "system": "urn:ietf:bcp:47", "code": "zh", "display": "Chinese" }],
                "text": "Chinese"
            }
        }
    ]
}

const TEST_ENCOUNTER: Encounter = {
    "resourceType":"Encounter",
    "id":"701a8dbd-c274-410f-8ed0-39748a3d70e8",
    "status":"finished",
    "class":{"system":"http://terminology.hl7.org/CodeSystem/v3-ActCode","code":"AMB"},
    "type":[
        {
            "coding":[
                {"system":"http://snomed.info/sct","code":"185345009","display":"Encounter for symptom"}
            ],
            "text":"Encounter for symptom"
        }
    ],
    "subject":{
        "reference":"Patient/58c297c4-d684-4677-8024-01131d93835e",
        "display":"Mrs. Aleta Wintheiser"
    },
    "participant":[
        {
            "type":[
                {
                    "coding":[{"system":"http://terminology.hl7.org/CodeSystem/v3-ParticipationType","code":"PPRF","display":"primary performer"}],
                    "text":"primary performer"
                }
            ],
            "period":{"start":"1972-02-03T16:48:38-05:00","end":"1972-02-03T17:03:38-05:00"},
            "individual":{
                "reference":"Practitioner/a9d62886-75af-3e87-b002-429faedb6a27",
                "display":"Dr. Jani Swift"
            }
        }
    ],
    "period":{"start":"1972-02-03T16:48:38-05:00","end":"1972-02-03T17:03:38-05:00"},
    "reasonCode":[
        {
            "coding":[{"system":"http://snomed.info/sct","code":"36971009","display":"Sinusitis (disorder)"}]
        }
    ],
    "serviceProvider":{
        "reference":"Organization/d692e283-0833-3201-8e55-4f868a9c0736",
        "display":"HALLMARK HEALTH SYSTEM"
    }
}


describe("match", () => {

    it("Throws on invalid resourceType", () => {
        expect(() => matches("gender:exact=male", { resourceType: "x" } as any))
            .to.throw('Resources of type "x" do not support searching')
    })
    
    it("Throws on unsupported parameter", () => {
        expect(() => matches("whatever:bad-modifier=male", TEST_PATIENT))
            .to.throw('Resources of type "Patient" do not support the "whatever" search parameter')
    })
    
    it("Throws on invalid modifier", () => {
        expect(() => matches("gender:bad-modifier=male", TEST_PATIENT))
            .to.throw('Unsupported search modifier "bad-modifier"')
    })

    // Token -------------------------------------------------------------------

    it("Patient.gender=…", () => {
        expect(matches("gender=female", TEST_PATIENT)).to.equal(true )
        expect(matches("gender=male"  , TEST_PATIENT)).to.equal(false)
        expect(() => matches("gender=|female", TEST_PATIENT))
            .to.throw('Searching with "|" can only be used against Coding or Identifier values')
    })

    it("Patient.telecom=…", () => {
        expect(matches("telecom=555-712-4709", TEST_PATIENT)).to.equal(true )
        expect(matches("telecom=phone|", TEST_PATIENT)).to.equal(true)
        expect(matches("telecom=|555-712-4709", TEST_PATIENT)).to.equal(false)
        expect(matches("telecom=phone|555-712-4709", TEST_PATIENT)).to.equal(true)
    })

    it("Patient.language=…", () => {
        expect(matches("language=zh"                , TEST_PATIENT),"fail 1").to.equal(true )
        expect(matches("language=fr"                , TEST_PATIENT),"fail 2").to.equal(false)
        expect(matches("language=urn:ietf:bcp:47|"  , TEST_PATIENT),"fail 3").to.equal(true )
        expect(matches("language=|zh"               , TEST_PATIENT),"fail 4").to.equal(false)
        expect(matches("language=urn:ietf:bcp:47|zh", TEST_PATIENT),"fail 5").to.equal(true )
    })

    it("Patient.telecom:missing=…", () => {
        expect(matches("telecom:missing=true" , TEST_PATIENT)).to.equal(false)
        expect(matches("telecom:missing=false", TEST_PATIENT)).to.equal(true )
    })

    it("Patient.language:text=…", () => {
        expect(matches("language:text=Chinese" , TEST_PATIENT)).to.equal(true)
        expect(matches("language:text=chin"    , TEST_PATIENT)).to.equal(true)
        expect(matches("language:text=english" , TEST_PATIENT)).to.equal(false)
    })

    it("Patient.language:not=…", () => {
        expect(matches("language:not=zh" , TEST_PATIENT)).to.equal(false)
        expect(matches("language:not=en" , TEST_PATIENT)).to.equal(true )
    })

    it("Patient.language:code-text=…", () => {
        expect(matches("language:code-text=Chinese" , TEST_PATIENT)).to.equal(true)
        expect(matches("language:code-text=chin"    , TEST_PATIENT)).to.equal(true)
        expect(matches("language:code-text=english" , TEST_PATIENT)).to.equal(false)
    })

    it("Patient.telecom:of-type=…", () => {
        expect(matches("telecom:of-type=555-712-4709", TEST_PATIENT)).to.equal(true )
        expect(matches("telecom:of-type=555"         , TEST_PATIENT)).to.equal(false)
    })

    // string ------------------------------------------------------------------
    it("Patient.family=…", () => {
        expect(matches("family=Wintheiser", TEST_PATIENT)).to.equal(true )
        expect(matches("family=whatever"  , TEST_PATIENT)).to.equal(false)
    })
    
    it("Patient.family:exact=…", () => {
        expect(matches("family:exact=Wintheiser", TEST_PATIENT)).to.equal(true )
        expect(matches("family:exact=whatever"  , TEST_PATIENT)).to.equal(false)
    })

    it("Patient.family:contains=…", () => {
        expect(matches("family:contains=Wintheiser", TEST_PATIENT)).to.equal(true )
        expect(matches("family:contains=wintheiser", TEST_PATIENT)).to.equal(true )
        expect(matches("family:contains=heiser"    , TEST_PATIENT)).to.equal(true )
        expect(matches("family:contains=whatever"  , TEST_PATIENT)).to.equal(false)
    })

    it("Patient.family:text=…", () => {
        expect(matches("family:text=Wintheiser", TEST_PATIENT)).to.equal(true )
        expect(matches("family:text=wintheiser", TEST_PATIENT)).to.equal(true )
        expect(matches("family:text=heiser"    , TEST_PATIENT)).to.equal(false)
        expect(matches("family:text=whatever"  , TEST_PATIENT)).to.equal(false)
    })

    it("Patient.family:whatever=…", () => {
        expect(() => matches("family:whatever=x", TEST_PATIENT))
            .to.throw('Unsupported search modifier "whatever" for string fields')
    })
    
    // reference ---------------------------------------------------------------
    it("Encounter.subject=…", () => {
        expect(matches("subject=Patient/58c297c4-d684-4677-8024-01131d93835e", TEST_ENCOUNTER)).to.equal(true )
        expect(matches("subject=58c297c4-d684-4677-8024-01131d93835e", TEST_ENCOUNTER)).to.equal(true )
        expect(matches("subject=x", TEST_ENCOUNTER)).to.equal(false)
        expect(matches("subject=Patient/x", TEST_ENCOUNTER)).to.equal(false)
    })
    
    it("Encounter.subject:text=…", () => {
        expect(matches("subject:text=Mrs. Aleta Wintheiser", TEST_ENCOUNTER)).to.equal(true )
        expect(matches("subject:text=Mrs. aleta Wintheiser", TEST_ENCOUNTER)).to.equal(true )
        expect(matches("subject:text=Mrs. Aleta Wintheisex", TEST_ENCOUNTER)).to.equal(false)
    })

    it("Encounter.subject:code-text=…", () => {
        expect(matches("subject:code-text=Mrs. Aleta Wintheiser", TEST_ENCOUNTER)).to.equal(true )
        expect(matches("subject:code-text=Mrs. aleta Wintheiser", TEST_ENCOUNTER)).to.equal(false)
        expect(matches("subject:code-text=Mrs. Aleta Wintheisex", TEST_ENCOUNTER)).to.equal(false)
    })

    it("Encounter.subject:whatever=…", () => {
        expect(() => matches("subject:whatever=x", TEST_ENCOUNTER)).to.throw(
            'Unsupported search modifier "whatever" for reference fields'
        )
    })

    // Date --------------------------------------------------------------------

    it("date=…", () => {
        expect(matches("birthdate=1971-04-05", TEST_PATIENT)).to.equal(true)
    })

    it("date=eq…", () => {
        expect(matches("birthdate=eq1971-04-05", TEST_PATIENT)).to.equal(true)
    })

    it("date=ne…", () => {
        expect(matches("birthdate=ne1971-04-06", TEST_PATIENT)).to.equal(true)
    })

    it("date=gt…", () => {
        expect(matches("birthdate=gt1971-04-04", TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=gt1971-04"   , TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=gt1971"      , TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=gt1970"      , TEST_PATIENT)).to.equal(true)
    })

    it("date=lt…", () => {
        expect(matches("birthdate=lt1971-04-06", TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=lt1971-05"   , TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=lt1972"      , TEST_PATIENT)).to.equal(true)
    })

    it("date=ge…", () => {
        expect(matches("birthdate=ge1971-04-04", TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=ge1971-04-05", TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=ge1971-04"   , TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=ge1971-03"   , TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=ge1971"      , TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=ge1970"      , TEST_PATIENT)).to.equal(true)
    })

    it("date=le…", () => {
        expect(matches("birthdate=le1971-04-05", TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=le1971-04-06", TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=le1971-05"   , TEST_PATIENT)).to.equal(true)
        expect(matches("birthdate=le1972"      , TEST_PATIENT)).to.equal(true)
    })

    it("date=sa…", () => {
        expect(matches("birthdate=sa1971-04-04", TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate=sa1971-04-05", TEST_PATIENT)).to.equal(false)
        expect(matches("birthdate=sa1971-04"   , TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate=sa1971-05"   , TEST_PATIENT)).to.equal(false)
        expect(matches("birthdate=sa1971"      , TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate=sa1972"      , TEST_PATIENT)).to.equal(false)
    })

    it("date=eb…", () => {
        expect(matches("birthdate=eb1971-04-06", TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate=eb1971-04-04", TEST_PATIENT)).to.equal(false)
        expect(matches("birthdate=eb1971-05"   , TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate=eb1971-04"   , TEST_PATIENT)).to.equal(false)
        expect(matches("birthdate=eb1972"      , TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate=eb1971"      , TEST_PATIENT)).to.equal(false)
    })

    it("date=ap…", () => {
        expect(matches("birthdate=ap1971-02-06", TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate=ap1971-06-06", TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate=ap1951-02-06", TEST_PATIENT)).to.equal(false)
        expect(matches("birthdate=ap1991-06-06", TEST_PATIENT)).to.equal(false)
    })

    it("date:missing=…", () => {
        expect(matches("birthdate:missing=false"   , TEST_PATIENT)).to.equal(true )
        expect(matches("birthdate:missing=true"    , TEST_PATIENT)).to.equal(false)
        expect(matches("birthdate:missing=false"   , { ...TEST_PATIENT, birthDate: undefined })).to.equal(false)
        expect(matches("birthdate:missing=true"    , { ...TEST_PATIENT, birthDate: undefined })).to.equal(true)
        expect(() => matches("birthdate:whatever=3", TEST_PATIENT)).to.throw('Unsupported search modifier "whatever" for date fields')
        expect(() => matches("birthdate:missing=3" , TEST_PATIENT)).to.throw(`The value of "missing" search can only be 'true' or 'false'`)
    })
})

describe("filter patients", () => {
    let db = getDatabase();
    let patients: Patient[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'Patient'`)
        patients = rows.map((r:any) => JSON.parse(r.resource_json))
    })

    const matrix = {
        "gender=female"               : 40,
        "gender=male"                 : 60,
        // "gender=male&birthdate=gt1971": 60,
        "birthdate=1971-04-05"        : 1,
        "birthdate=gt1971-04-05"      : 55,
        "birthdate=lt1971-04-05"      : 44,
        "language=zh"                 : 1,
        "family=Wintheiser"           : 1,
        "family:contains=a"           : 47,
        "given=Aleta"                 : 1,
        "name:contains=Aleta"         : 1,
        "deceased=false"              : 100,
        "deceased=true"               : 0,
        "address-state=Massachusetts" : 100,
        "address-country:contains=us" : 100,
        "death-date:missing=true"     : 100,
        "link:missing=true"           : 100,
        "address-city=Boston"         : 10,
        "email:missing=true"          : 100,
        "address-use=work"            : 0,
        "address-postalcode=02149"    : 1,
        "address:contains=Everett"    : 1,
        "organization:missing=true"   : 100,
        "phone=555-712-4709"          : 1,
        "active=true"                 : 100,
        "identifier=58c297c4-d684-4677-8024-01131d93835e"      : 1,
        "identifier=http://hl7.org/fhir/sid/us-ssn|"           : 100,
        "identifier=http://hl7.org/fhir/sid/us-ssn|999-33-6284": 1,
        "_id=58c297c4-d684-4677-8024-01131d93835e"             : 1
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = filter(patients, query)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }

    // male OR female
    it ("_typeFilter=Patient?gender=female,male", async () => {
        const filtered = typeFilter(patients, "_typeFilter=" + encodeURIComponent("Patient?gender=female,male"))
        expect(filtered.length).to.equal(100)
    })

    // male OR female
    it ("_typeFilter=Patient?gender=female&_typeFilter=Patient?gender=male", async () => {
        const filtered = typeFilter(patients, "_typeFilter=" + encodeURIComponent("Patient?gender=female") + "&_typeFilter=" + encodeURIComponent("Patient?gender=male"))
        expect(filtered.length).to.equal(100)
    })

    // male AND female
    it ("_typeFilter=Patient?gender=female&gender=male", async () => {
        const filtered = typeFilter(patients, "_typeFilter=" + encodeURIComponent("Patient?gender=female&gender=male"))
        expect(filtered.length).to.equal(0)
    })
})

describe("typeFilter on Encounter", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'Encounter'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("encounters:", resources.length)
    })

    // total: 3697

    const matrix = {
        "subject=58c297c4-d684-4677-8024-01131d93835e"                      : 15,
        "status=planned"                                                    : 0,
        "status=in-progress"                                                : 0,
        "status=on-hold"                                                    : 0,
        "status=completed"                                                  : 0,
        "status=cancelled"                                                  : 0,
        "status=entered-in-error"                                           : 0,
        "status=unknown"                                                    : 0,
        "_id=701a8dbd-c274-410f-8ed0-39748a3d70e8"                          : 1,
        "type=185345009"                                                    : 322,
        "class=AMB"                                                         : 3458,
        "participant=a9d62886-75af-3e87-b002-429faedb6a27"                  : 54,
        "participant=Practitioner/a9d62886-75af-3e87-b002-429faedb6a27"     : 54,
        "patient=Patient/58c297c4-d684-4677-8024-01131d93835e"              : 15,
        "patient=58c297c4-d684-4677-8024-01131d93835e"                      : 15,
        "identifier:missing=false"                                          : 0,
        "length:missing=false"                                              : 0,
        "practitioner=Practitioner/a9d62886-75af-3e87-b002-429faedb6a27"    : 54,
        "practitioner=a9d62886-75af-3e87-b002-429faedb6a27"                 : 54,
        "service-provider=Organization/d692e283-0833-3201-8e55-4f868a9c0736": 54,
        "service-provider=d692e283-0833-3201-8e55-4f868a9c0736"             : 54,
        "appointment:missing=false"                                         : 0,
        "account:missing=false"                                             : 0,
        "location:missing=false"                                            : 0,
        "reason-code=36971009"                                              : 20,
        "reason-reference:missing=false"                                    : 0,
        "diagnosis:missing=false"                                           : 0,
        "date=ap1972-02-03"                                                 : 84,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Encounter?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on Observation", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'Observation'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("Observations:", resources.length)
    })

    // total: 16315

    const matrix = {
        "_id=f25af686-ea75-46e9-89d9-369a28dd2860"                 : 1,
        "subject=Patient/58c297c4-d684-4677-8024-01131d93835e"     : 116,
        "patient=Patient/58c297c4-d684-4677-8024-01131d93835e"     : 116,
        "patient=58c297c4-d684-4677-8024-01131d93835e"             : 116,
        "encounter=0c578fd3-3911-45e3-bb35-d059ecc31a7a"           : 28,
        "encounter=Encounter/0c578fd3-3911-45e3-bb35-d059ecc31a7a" : 28,
        "category=vital-signs"                                     : 7317,
        "category=social-history"                                  : 72,
        "device=efe0c5dc-85f9-4fcd-bd33-a61f770e75a1"              : 0,
        "status=final"                                             : 16315,
        "date=ap2017-10"                                           : 2433,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Observation?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on Procedure", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'Procedure'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("Procedures:", resources.length)
    })

    // total: 2351

    const matrix = {
        "_id=5bca5598-50b6-451d-919e-1e73d4c0bb0d"                       : 1,
        "code=180256009"                                                 : 214,
        "code=http://snomed.info/sct|180256009"                          : 214,
        "code:text=Subcutaneous immunotherapy"                           : 214,
        "subject=Patient/588675dc-e80e-4528-a78f-af10f9755f23"           : 6,
        "patient=Patient/588675dc-e80e-4528-a78f-af10f9755f23"           : 6,
        "patient=588675dc-e80e-4528-a78f-af10f9755f23"                   : 6,
        "encounter=0c578fd3-3911-45e3-bb35-d059ecc31a7a"                 : 1,
        "encounter=Encounter/0c578fd3-3911-45e3-bb35-d059ecc31a7a"       : 1,
        "status=completed"                                               : 2351,
        "reason-reference=Condition/9f0963f8-0840-428c-b480-2a851e454d22": 4,
        "reason-reference=9f0963f8-0840-428c-b480-2a851e454d22"          : 4,
        "date=ap2017-10"                                                 : 344,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Procedure?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on Practitioner", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'Practitioner'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("Practitioners:", resources.length)
    })

    // total: 203

    const matrix = {
        "_id=ffe453d9-3aba-33e5-89a4-00344c0cde4b" : 1,
        "active=true"                              : 203,
        "active=false"                             : 0,
        "address:contains=BRIDGEWATER"             : 2,
        "address-state=MA"                         : 203,
        "address-city=WEST BRIDGEWATER"            : 2,
        "address-country:contains=us"              : 203,
        "address-postalcode=02379-1542"            : 1,
        "address-use=work"                         : 0,
        "email:missing=true"                       : 0,
        "email=Horacio.Páez@example.com"           : 1,
        "gender=female"                            : 105,
        "gender=male"                              : 98,
        "given=Horacio"                            : 1,
        "family=Páez"                              : 1,
        "family:contains=z"                        : 16,
        "name:contains=Horacio"                    : 1,
        "identifier=9999999889"                    : 1,
        "phone=555-712-4709"                       : 0,
        "telecom=Laurena.White@example.com"        : 2,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Practitioner?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on Group", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'Group'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("Groups:", resources)
    })

    // total: 8

    const matrix = {
        "_id=MinutemanHealth"                                 : 1,
        "member=urn:uuid:c852042b-1373-45e6-acb5-f252c733de3a": 1,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Group?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }

    it ("actual=true", async () => {
        const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Group?actual=true')}`)
        expect(filtered.length).to.be.greaterThanOrEqual(8)
    })

    it ("actual=false", async () => {
        const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Group?actual=false')}`)
        expect(filtered.length).to.be.greaterThanOrEqual(0)
    })

    it ("type=person", async () => {
        const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Group?type=person')}`)
        expect(filtered.length).to.be.greaterThanOrEqual(8)
    })
})

describe("typeFilter on AllergyIntolerance", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'AllergyIntolerance'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("AllergyIntolerance:", resources.length)
    })

    // total: 38

    const matrix = {
        "_id=6ecd70e9-5874-4e80-8495-05ec033b3f89"            : 1,
        "category=food"                                       : 38,
        "category=environment"                                : 0,
        "clinical-status=active"                              : 27,
        "clinical-status=inactive"                            : 11,
        "code=232347008"                                      : 6,
        "criticality=high"                                    : 0,
        "criticality=low"                                     : 38,
        "date=eq1996-03-24T11:51:46-05:00"                    : 3,
        "date=ap1996-03-24"                                   : 11,
        "patient=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205": 5,
        "patient=644d85af-aaf9-4068-ad23-1e55aedd5205"        : 5,
        "type=allergy"                                        : 38,
        "verification-status=confirmed"                       : 38
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('AllergyIntolerance?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on CarePlan", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'CarePlan'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("CarePlan:", resources.length)
    })

    // total: 278

    const matrix = {
        "_id=5bfe1c58-4129-4f8a-b703-0ba4276c1cd8"                : 1,
        "activity-code=304510005"                                 : 58,
        "activity-reference:missing=false"                        : 0,
        "based-on:missing=false"                                  : 0,
        "care-team=CareTeam/278a60e1-bd2b-4b04-87ac-9c563a32690c" : 1,
        "care-team=278a60e1-bd2b-4b04-87ac-9c563a32690c"          : 1,
        "condition=Condition/bb9b076a-6bf0-406f-b607-6a2778224709": 1,
        "condition=bb9b076a-6bf0-406f-b607-6a2778224709"          : 1,
        "goal:missing=false"                                      : 0,
        "identifier:missing=false"                                : 0,
        "instantiates-canonical:missing=false"                    : 0,
        "instantiates-uri:missing=false"                          : 0,
        "part-of:missing=false"                                   : 0,
        "intent=order"                                            : 278,
        "category=53950000"                                       : 58,
        "subject=644d85af-aaf9-4068-ad23-1e55aedd5205"            : 5,
        "subject=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205"    : 5,
        "date=ap2015-02-21"                                       : 26,
        "encounter=Encounter/0c6a49c3-7793-4d7d-a443-190af18d9388": 1,
        "encounter=0c6a49c3-7793-4d7d-a443-190af18d9388"          : 1,
        "patient=644d85af-aaf9-4068-ad23-1e55aedd5205"            : 5,
        "patient=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205"    : 5,
        "status=completed"                                        : 165,
        "status=active"                                           : 113,
        "performer:missing=false"                                 : 0,
        "replaces:missing=false"                                  : 0,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('CarePlan?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on CareTeam", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'CareTeam'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("CareTeam:", resources.length)
    })

    // total: 278

    const matrix = {
        "_id=e09bd038-5971-41cb-90a7-e1e148f07842"                : 1,
        "category:missing=false"                                  : 0,
        "identifier:missing=false"                                : 0,
        "subject=644d85af-aaf9-4068-ad23-1e55aedd5205"            : 5,
        "subject=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205"    : 5,
        "date=ap2015-02-21"                                       : 26,
        "encounter=Encounter/0c6a49c3-7793-4d7d-a443-190af18d9388": 1,
        "encounter=0c6a49c3-7793-4d7d-a443-190af18d9388"          : 1,
        "participant=644d85af-aaf9-4068-ad23-1e55aedd5205"        : 5,
        "participant=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205": 5,
        "patient=644d85af-aaf9-4068-ad23-1e55aedd5205"            : 5,
        "patient=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205"    : 5,
        "status=active"                                           : 113,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('CareTeam?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on DiagnosticReport", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'DiagnosticReport'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("DiagnosticReport:", resources.length)
    })

    // total: 897

    const matrix = {
        "_id=4953ab38-ad73-4588-b199-ed6d3eb3a5a2"                : 1,
        "based-on:missing=false"                                  : 0,
        "conclusion:missing=false"                                : 0,
        "media:missing=false"                                     : 0,
        "performer:missing=false"                                 : 0,
        "results-interpreter:missing=false"                       : 0,
        "specimen:missing=false"                                  : 0,
        "category=LAB"                                            : 897,
        "code=51990-0"                                            : 259,
        "date=2015-04-20T17:48:38-04:00"                          : 1,
        "date=eq2015-04-20T17:48:38-04:00"                        : 1,
        "date=ap2015-04-20"                                       : 175,
        "issued=2017-04-24T17:48:38.194-04:00"                    : 3,
        "issued=eq2017-04-24T17:48:38.194-04:00"                  : 3,
        "issued=ap2017-04-24"                                     : 152,
        "identifier:missing=false"                                : 0,
        "result=Observation/1becd79e-573d-4129-a973-d1c925b2beb9" : 1,
        "result=1becd79e-573d-4129-a973-d1c925b2beb9"             : 1,
        "subject=644d85af-aaf9-4068-ad23-1e55aedd5205"            : 2,
        "subject=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205"    : 2,
        "encounter=Encounter/352b42c1-7735-4fd7-8c8a-b67a8f5d10c5": 1,
        "encounter=352b42c1-7735-4fd7-8c8a-b67a8f5d10c5"          : 1,
        "patient=644d85af-aaf9-4068-ad23-1e55aedd5205"            : 2,
        "patient=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205"    : 2,
        "status=final"                                            : 897,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('DiagnosticReport?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on Condition", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'Condition'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("Condition:", resources.length)
    })

    // total: 639

    const matrix = {
        "_id=e370b32d-cec1-458c-90a0-810ed1c252ae"                : 1,
        "verification-status=confirmed"                           : 639,
        "stage:missing=false"                                     : 0,
        "severity:missing=false"                                  : 0,
        "onset-info:missing=false"                                : 0,
        "onset-age:missing=false"                                 : 0,
        "onset-date:missing=false"                                : 639,
        "onset-date=ap2018-10-28"                                 : 57,
        "evidence-detail:missing=false"                           : 0,
        "evidence:missing=false"                                  : 0,
        "category:missing=false"                                  : 0,
        "body-site:missing=false"                                 : 0,
        "asserter:missing=false"                                  : 0,
        "abatement-string:missing=false"                          : 0,
        "abatement-age:missing=false"                             : 0,
        "abatement-date:missing=false"                            : 381,
        "clinical-status=resolved"                                : 381,
        "code=44465007"                                           : 14,
        "recorded-date=2018-10-28T04:41:16-04:00"                 : 1,
        "recorded-date=eq2018-10-28T04:41:16-04:00"               : 1,
        "recorded-date=ap2018-10-28"                              : 57,
        "abatement-date=ap2018-10-28"                             : 51,
        "identifier:missing=false"                                : 0,
        "subject=644d85af-aaf9-4068-ad23-1e55aedd5205"            : 5,
        "subject=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205"    : 5,
        "encounter=Encounter/451d2e13-922c-47c7-b1f6-6b41ee0e6d25": 1,
        "encounter=451d2e13-922c-47c7-b1f6-6b41ee0e6d25"          : 1,
        "patient=644d85af-aaf9-4068-ad23-1e55aedd5205"            : 5,
        "patient=Patient/644d85af-aaf9-4068-ad23-1e55aedd5205"    : 5,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Condition?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on DocumentReference", () => {
    let db = getDatabase();
    let resources: FhirResource[] = [];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'DocumentReference'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("DocumentReference:", resources.length)
    })

    // total: 3

    it ("_id=...", async () => {
        const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('DocumentReference?_id=' + resources[0].id)}`)
        expect(filtered.length).to.equal(1)
    })

    const matrix = {
        "authenticator:missing=false"                             : 0,
        "author=Practitioner/4edac2d9-adb7-3723-a5d2-40ca35ae9e17": 3,
        "author=4edac2d9-adb7-3723-a5d2-40ca35ae9e17"             : 3,
        "category:missing=false"                                  : 0,
        "contenttype=image/jpeg"                                  : 2,
        "custodian:missing=false"                                 : 0,
        "description=User photo"                                  : 1,
        "encounter:missing=false"                                 : 0,
        "event:missing=false"                                     : 0,
        "facility:missing=false"                                  : 0,
        "format:missing=false"                                    : 0,
        "identifier:missing=false"                                : 0,
        "language:missing=false"                                  : 0,
        "location:missing=false"                                  : 2,
        "location=/attachments/document.pdf"                      : 1,
        "period:missing=false"                                    : 0,
        "related:missing=false"                                   : 0,
        "relatesto:missing=false"                                 : 0,
        "relation:missing=false"                                  : 0,
        "security-label:missing=false"                            : 0,
        "setting:missing=false"                                   : 0,
        "status=current"                                          : 3,
        "date=ap2018-05-26"                                       : 3,
        "patient=58c297c4-d684-4677-8024-01131d93835e"            : 3,
        "patient=Patient/58c297c4-d684-4677-8024-01131d93835e"    : 3,
        "subject=58c297c4-d684-4677-8024-01131d93835e"            : 3,
        "subject=Patient/58c297c4-d684-4677-8024-01131d93835e"    : 3,
        "type=69764-9"                                            : 1,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('DocumentReference?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on MedicationRequest", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'MedicationRequest'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("MedicationRequest:", resources.length)
    })

    // total: 2386

    const matrix = {
        "_id=7dc94569-3193-40c1-b4b9-66885d55d29e"                   : 1,
        "authoredon=1996-03-24T11:51:46-05:00"                       : 2,
        "category:missing=false"                                     : 0,
        "code=834102"                                                : 7,
        "date:missing=false"                                         : 0,
        "encounter=Encounter/7a3811ad-0b8b-43b1-b2be-29efa8275d99"   : 2,
        "encounter=7a3811ad-0b8b-43b1-b2be-29efa8275d99"             : 2,
        "identifier:missing=false"                                   : 0,
        "intended-dispenser:missing=false"                           : 0,
        "intended-performer:missing=false"                           : 0,
        "intended-performertype:missing=false"                       : 0,
        "intent:missing=false"                                       : 2386,
        "intent=order"                                               : 2386,
        "medication:missing=false"                                   : 0,
        "priority:missing=false"                                     : 0,
        "requester:missing=false"                                    : 2386,
        "requester=Practitioner/0e8b4457-d375-3ebb-944d-6a8b66db1d7c": 11,
        "requester=0e8b4457-d375-3ebb-944d-6a8b66db1d7c"             : 11,
        "status=stopped"                                             : 2251,
        "patient=58c297c4-d684-4677-8024-01131d93835e"               : 1,
        "patient=Patient/58c297c4-d684-4677-8024-01131d93835e"       : 1,
        "subject=58c297c4-d684-4677-8024-01131d93835e"               : 1,
        "subject=Patient/58c297c4-d684-4677-8024-01131d93835e"       : 1,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('MedicationRequest?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on Organization", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE fhir_type = 'Organization'`)
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
        // console.log("Organization:", resources.length)
    })

    // total: 203

    const matrix = {
        "_id=00065b1c-5e71-3da5-907f-e9fc33eddbbf"                   : 1,
        "active=true"                                                : 203,
        "address:contains=BRIDGEWATER"                               : 2,
        "address-state=MA"                                           : 203,
        "address-city=WEST BRIDGEWATER"                              : 2,
        "address-country:contains=us"                                : 203,
        "address-postalcode=02379-1542"                              : 1,
        "address-use=work"                                           : 0,
        "endpoint:missing=false"                                     : 0,
        "identifier:missing=false"                                   : 203,
        "identifier=00065b1c-5e71-3da5-907f-e9fc33eddbbf"            : 1,
        "name=PCP115959"                                             : 1,
        "partof:missing=false"                                       : 0,
        "type=prov"                                                  : 203,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, `_typeFilter=${encodeURIComponent('Organization?' + query)}`)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
})

describe("typeFilter on all resources", () => {
    let db = getDatabase();
    let resources: FhirResource[];

    before(async () => {
        const rows = await db.promise("all", `SELECT resource_json FROM data WHERE expires_at IS NULL`) // exclude custom groups
        resources = rows.map((r:any) => JSON.parse(r.resource_json))
    })

    // const total = 38483

    const matrix = {
        [`_typeFilter=${encodeURIComponent('Patient?gender=male')}`]                 : 38443,
        [`_typeFilter=${encodeURIComponent('Patient?birthdate=gt1971')}`]            : 38439,
        
        // Two _typeFilter condition values: logical AND
        [`_typeFilter=${encodeURIComponent('Patient?gender=male&birthdate=gt1971')}`]: 38419,
        
        // Two _typeFilter condition values: logical OR
        [`_typeFilter=${encodeURIComponent('Patient?gender=male,female')}`]: 38483,
        
        // Two _typeFilter parameters: logical OR
        [
            `_typeFilter=${encodeURIComponent('Patient?gender=male')}&` +
            `_typeFilter=${encodeURIComponent('Patient?birthdate=gt1971')}`
        ]: 38463,

        // [`_typeFilter=${encodeURIComponent('Encounter?subject=58c297c4-d684-4677-8024-01131d93835e')}`]          : 38483,
    }

    for (const query in matrix) {
        it (query, async () => {
            const filtered = typeFilter(resources, query)
            expect(filtered.length).to.equal(matrix[query as keyof typeof matrix])
        })
    }
    // console.log(
    //     typeFilter(
    //         patients,
    //         // '_typeFilter=MedicationRequest%3Fstatus%3Dactive&_typeFilter=MedicationRequest%3Fstatus%3Dcompleted%26date%3Dgt2018-07-01T00%3A00%3A00Z'
    //         // '_typeFilter=MedicationRequest%3Fstatus%3Dactive'
    //         '_typeFilter=' + encodeURIComponent('Patient?gender=male&birthdate=gt1971')
    //     ).length
    // )
})

describe("getGroupMembers", () => {
    let db = getDatabase();
    let rows: any[];

    before(async () => {
        rows = await db.promise("all", `SELECT * FROM data`)
    })

    const matrix = new Map<string[], number>([
        [["Patient?gender=female"]                                  , 40],
        [["Patient?gender=male"]                                    , 60],
        [["Patient?birthdate=gt1991-04-05"]                         , 41],
        [["Patient?gender=female&birthdate=gt1991-04-05"]           , 15],
        [["Patient?gender=female", "Patient?birthdate=gt1991-04-05"], 15],
        [["Patient?gender=male", "MedicationRequest?status=stopped"], 98]
    ]);

    for (const [memberFilters, count] of matrix.entries()) {
        it (JSON.stringify(memberFilters) + " => " + count, async () => {
            const group = { modifierExtension: memberFilters.map(f => ({
                "url": "/memberFilter", valueString: f })) } as Group;
            expect(getGroupMembers(group, rows).size).to.equal(count)
        })
    }
})

describe("validateQuery", () => {
    it ("rejects empty queries", () => {
        expect(() => validateQuery("")).throws(/Empty query/)
        expect(() => validateQuery([])).throws(/Empty query/)
        expect(() => validateQuery([""])).throws(/Empty query/)
        expect(() => validateQuery(["", ""])).throws(/Empty query/)
    })

    it ("rejects missing resource types", () => {
        expect(() => validateQuery("x")).throws(/Missing resourceType/)
        expect(() => validateQuery(["x"])).throws(/Missing resourceType/)
    })

    it ("validate against the patient compartment", () => {
        expect(() => validateQuery("x?y", { compartment: config.patientCompartment }))
            .throws(/not included in the target compartment/)
    })

    it ("validate against the practitioner compartment", () => {
        expect(() => validateQuery("x?y", { compartment: config.practitionerCompartment }))
            .throws(/not included in the target compartment/)
    })

    it ("validate against the available resource types", () => {
        expect(() => validateQuery("x?y", { availableResourceTypes: config.practitionerCompartment }))
            .throws(/Resources of type x are not available/)
    })

    it ("rejects if the resource is not searchable", () => {
        expect(() => validateQuery("x?a"))
            .throws(/Resources of type "x" do not support searching/)
    })

    it ("rejects if the resource does not support the search parameter", () => {
        expect(() => validateQuery("Patient?a=1"))
            .throws(/Resources of type "Patient" do not support the "a" search parameter/)
    })
})
